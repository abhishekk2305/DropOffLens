import PDFDocument from "pdfkit";
import { type AnalysisResults } from "@shared/schema";

export function generatePDFReport(analysisResults: AnalysisResults): Promise<Buffer> {
  return new Promise<Buffer>((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 });
      const buffers: Buffer[] = [];
      
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfBuffer = Buffer.concat(buffers);
        resolve(pdfBuffer);
      });
      
      // Header
      doc.fontSize(24)
         .fillColor('#2563eb')
         .text('DropOffLens Analysis Report', { align: 'center' });
      
      doc.fontSize(14)
         .fillColor('#6b7280')
         .text('Customer Exit Feedback Analysis', { align: 'center' })
         .moveDown(2);
      
      // Summary Box
      doc.rect(50, doc.y, 495, 120)
         .fillAndStroke('#f8fafc', '#e5e7eb');
      
      const summaryY = doc.y + 10;
      doc.fontSize(16)
         .fillColor('#1f2937')
         .text('Analysis Summary', 60, summaryY + 10);
      
      doc.fontSize(12)
         .fillColor('#374151')
         .text(`Total Feedback Entries: ${analysisResults.totalFeedback}`, 60, summaryY + 35)
         .text(`Key Themes Identified: ${analysisResults.themesFound}`, 60, summaryY + 50)
         .text(`Processing Time: ${analysisResults.processingTime.toFixed(2)} seconds`, 60, summaryY + 65)
         .text(`Generated: ${new Date().toLocaleDateString()}`, 60, summaryY + 80);
      
      doc.y = summaryY + 120;
      doc.moveDown(2);
      
      // Themes
      analysisResults.themes.forEach((theme, index) => {
        // Check if we need a new page
        if (doc.y > 650) {
          doc.addPage();
        }
        
        // Theme header
        const themeY = doc.y;
        doc.rect(50, themeY, 495, 30)
           .fillAndStroke('#dbeafe', '#2563eb');
        
        doc.fontSize(14)
           .fillColor('#1f2937')
           .text(`${index + 1}. ${theme.name}`, 60, themeY + 8);
        
        doc.fontSize(12)
           .fillColor('#2563eb')
           .text(`${theme.percentage}%`, 480, themeY + 8, { align: 'right' });
        
        doc.y = themeY + 40;
        
        // Summary
        doc.fontSize(11)
           .fillColor('#374151')
           .text('Summary: ', 60, doc.y, { continued: true })
           .text(theme.summary, { width: 485 });
        
        doc.moveDown(1);
        
        // Quotes
        doc.text('Representative Quotes:', 60, doc.y)
           .moveDown(0.5);
        
        theme.quotes.forEach(quote => {
          doc.fontSize(10)
             .fillColor('#6b7280')
             .font('Helvetica-Oblique')
             .text(`"${quote}"`, 70, doc.y, { width: 475 })
             .font('Helvetica');
          doc.moveDown(0.5);
        });
        
        doc.moveDown(0.5);
        
        // Suggested Action
        const actionY = doc.y;
        doc.rect(60, actionY, 475, 40)
           .fillAndStroke('#dbeafe', '#2563eb');
        
        doc.fontSize(11)
           .fillColor('#1f2937')
           .text('Suggested Action: ', 70, actionY + 5, { continued: true })
           .text(theme.suggestedAction, { width: 455 });
        
        doc.y = actionY + 50;
        doc.moveDown(1.5);
      });
      
      // Footer
      doc.fontSize(8)
         .fillColor('#9ca3af')
         .text('Generated by DropOffLens - Powered by OpenAI GPT', 50, doc.page.height - 50, {
           align: 'center',
           width: 495
         });
      
      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}

// Legacy HTML export function (keeping for backwards compatibility)
export function generateHTMLReport(analysisResults: AnalysisResults): string {
  const html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>DropOffLens Analysis Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; color: #333; }
        .header { text-align: center; border-bottom: 2px solid #2563eb; padding-bottom: 20px; margin-bottom: 30px; }
        .header h1 { color: #2563eb; margin: 0; }
        .summary { background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
        .theme { margin-bottom: 30px; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; }
        .theme-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
        .theme-name { font-size: 18px; font-weight: bold; color: #1f2937; }
        .theme-percentage { background: #2563eb; color: white; padding: 4px 12px; border-radius: 20px; font-size: 14px; }
        .quotes { background: #f9fafb; padding: 15px; border-left: 4px solid #d1d5db; margin: 15px 0; }
        .quote { font-style: italic; color: #6b7280; margin-bottom: 8px; }
        .action { background: #dbeafe; padding: 15px; border-radius: 8px; border-left: 4px solid #2563eb; }
        .footer { text-align: center; margin-top: 40px; color: #6b7280; font-size: 12px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>DropOffLens Analysis Report</h1>
        <p>Customer Exit Feedback Analysis</p>
    </div>
    
    <div class="summary">
        <h2>Analysis Summary</h2>
        <p><strong>Total Feedback Entries:</strong> ${analysisResults.totalFeedback}</p>
        <p><strong>Key Themes Identified:</strong> ${analysisResults.themesFound}</p>
        <p><strong>Processing Time:</strong> ${analysisResults.processingTime.toFixed(2)} seconds</p>
        <p><strong>Generated:</strong> ${new Date().toLocaleDateString()}</p>
    </div>
    
    ${analysisResults.themes.map((theme, index) => `
    <div class="theme">
        <div class="theme-header">
            <div class="theme-name">${index + 1}. ${theme.name}</div>
            <div class="theme-percentage">${theme.percentage}%</div>
        </div>
        
        <p><strong>Summary:</strong> ${theme.summary}</p>
        
        <div class="quotes">
            <strong>Representative Quotes:</strong>
            ${theme.quotes.map(quote => `<div class="quote">"${quote}"</div>`).join('')}
        </div>
        
        <div class="action">
            <strong>Suggested Action:</strong> ${theme.suggestedAction}
        </div>
    </div>
    `).join('')}
    
    <div class="footer">
        <p>Generated by DropOffLens - Powered by OpenAI GPT</p>
    </div>
</body>
</html>`;

  return html;
}
